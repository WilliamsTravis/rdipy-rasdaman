[
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "ATemplate",
        "kind": 6,
        "importPath": "geodaman.templates",
        "description": "geodaman.templates",
        "peekOfCode": "class ATemplate:\n    \"\"\"A docstring.\"\"\"\n    def __init__(self):\n        \"\"\"Initialize an ATemplate object.\"\"\"\n    def __repr__(self):\n        \"\"\"Return an ATemplate object representation string.\"\"\"\n        address = hex(id(self))\n        msgs = [f\"\\n   {k}={v}\" for k, v in self.__dict__.items()]\n        msg = \", \".join(msgs)\n        return f\"<ATemplate object at {address}>: {msg}\"",
        "detail": "geodaman.templates",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "geodaman.templates",
        "description": "geodaman.templates",
        "peekOfCode": "def main():\n    \"\"\"A docstring.\"\"\"\nif __name__ == \"__main__\":\n    pass",
        "detail": "geodaman.templates",
        "documentation": {}
    },
    {
        "label": "HOME",
        "kind": 5,
        "importPath": "geodaman.templates",
        "description": "geodaman.templates",
        "peekOfCode": "HOME = Path(\"/home/travis/github/geodaman\")\nclass ATemplate:\n    \"\"\"A docstring.\"\"\"\n    def __init__(self):\n        \"\"\"Initialize an ATemplate object.\"\"\"\n    def __repr__(self):\n        \"\"\"Return an ATemplate object representation string.\"\"\"\n        address = hex(id(self))\n        msgs = [f\"\\n   {k}={v}\" for k, v in self.__dict__.items()]\n        msg = \", \".join(msgs)",
        "detail": "geodaman.templates",
        "documentation": {}
    },
    {
        "label": "REPO_DIR",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "REPO_DIR = os.path.abspath(os.path.dirname(__file__))\nVERSION_FILE = os.path.join(REPO_DIR, \"geodaman\", \"version.py\")\nDESCRIPTION = \"A description of the package.\"\nwith open(os.path.join(REPO_DIR, \"README.md\"), encoding=\"utf-8\") as f:\n    README = f.read()\nwith open(\"requirements.txt\") as f:\n    REQUIREMENTS = f.read().splitlines()\nsetup(\n    name=\"geodaman\",\n    version=\"0.0.1\",",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "VERSION_FILE",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "VERSION_FILE = os.path.join(REPO_DIR, \"geodaman\", \"version.py\")\nDESCRIPTION = \"A description of the package.\"\nwith open(os.path.join(REPO_DIR, \"README.md\"), encoding=\"utf-8\") as f:\n    README = f.read()\nwith open(\"requirements.txt\") as f:\n    REQUIREMENTS = f.read().splitlines()\nsetup(\n    name=\"geodaman\",\n    version=\"0.0.1\",\n    description=DESCRIPTION,",
        "detail": "setup",
        "documentation": {}
    },
    {
        "label": "DESCRIPTION",
        "kind": 5,
        "importPath": "setup",
        "description": "setup",
        "peekOfCode": "DESCRIPTION = \"A description of the package.\"\nwith open(os.path.join(REPO_DIR, \"README.md\"), encoding=\"utf-8\") as f:\n    README = f.read()\nwith open(\"requirements.txt\") as f:\n    REQUIREMENTS = f.read().splitlines()\nsetup(\n    name=\"geodaman\",\n    version=\"0.0.1\",\n    description=DESCRIPTION,\n    long_description=README,",
        "detail": "setup",
        "documentation": {}
    }
]